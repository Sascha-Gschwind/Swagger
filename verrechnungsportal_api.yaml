openapi: 3.1.0
info:
  title: Swagger Verrechnungsportal - OpenAPI 3.1
  description: This is the api definition of the Verrechnungsportal backend.
  version: 1.0.0
tags:
  - name: masterdata
    description: Access master data
  - name: transaction
    description: API's regarding the transactions
paths:
  /masterdata/state:
    get:
      tags: [masterdata]
      summary: Gets all the possible states
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
  /masterdata/workflowtype:
    get:
      tags: [masterdata]
      summary: Gets all the possible workflow types
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowType'
  /masterdata/person:
    get:
      tags: [masterdata]
      summary: Gets all persons
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
  /masterdata/businesscase:
    get:
      tags: [masterdata]
      summary: Get all available business cases
      description: There are 4 hardcoded business case types and an unknown amount of business cases defined for those 4 types
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessCase'
  /masterdata/role:
    get:
      tags: [masterdata]
      summary: Get the roles of the user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /masterdata/transaction/{transactionId}:
    get:
      tags: [masterdata]
      summary: Get the available position-selectables for a specific transaction
      description: Get the position-selectables based on the sender, receiver and the BusinessCaseType
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPositionData'
  /transaction:
    get:
      tags: [transaction]
      summary: Get all transactions
      description: Get all the transactions a user is allowed to see. In a later stage the api probably also has to be able to accept some filter parameters, but for v1.0 we will filter the data in the frontend
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionOverview'
    post:
      tags: [transaction]
      summary: Add a new Transaction
      description: Only the following fields will have relevant values [type, year, workflowType]
      requestBody:
        description: Create a new transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transaction/{transactionId}:
    get:
      tags: [transaction]
      summary: Get a transaction
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    put:
      tags: [transaction]
      summary: Update a transaction
      description: 
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '204':
          description: Success
    delete:
      tags: [transaction]
      summary: Delete a transaction
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
  /transaction/{transactionId}/state:
    put:
      tags: [transaction]
      summary: Update a transaction-state
      description: When a transaction states changes the backend has to update the state of the transaction and add an entry to the history with the correct action that was taken.
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionStateChange'
      responses:
        '204':
          description: Success
  /transaction/{transactionId}/position:
    post:
      tags: [transaction]
      summary: Create a transaction position
      description: Every position can have a file attached to it. In this draft we would use Base64 encoded string representing the file
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      requestBody:
        description: Create a transaction position
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPosition'
      responses:
        '204':
          description: Success
  /transaction/{transactionId}/position/{positionId}:
    put:
      tags: [transaction]
      summary: Update an existing position
      description:
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
        - name: positionId
          in: path
          description: Id of the position
          required: true
          schema:
            type: string
      requestBody:
        description: Update a transaction position
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPosition'
      responses:
        '204':
          description: Success
    delete:
      tags: [transaction]
      summary: Delete an existing position
      description:
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
        - name: positionId
          in: path
          description: Id of the position
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
  /transaction/{transactionId}/attachment:
    post:
      tags: [transaction]
      summary: Upload a new file
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '204':
          description: Success
  /transaction/{transactionId}/attachment/{attachmentId}:
    get:
      tags: [transaction]
      summary: Get the attachment data
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          description: Id of the attachment. Equals the ArchiveDocId in SAP
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
    delete:
      tags: [transaction]
      summary: Delete a file
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          description: Id of the attachment. Equals the ArchiveDocId in SAP
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
  /transactions/book:
    put:
      tags: [transaction]
      summary: Book all positions of the transactions
      description: Book all positions of the sent transaction id's to the sent booking date
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '400':
          description: Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingError'
components:
  schemas:
    State:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1]
        name:
          type: string
          examples: ["Neu"]
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1235]
        pId:
          type: string
          examples: ["205205"]
        firstName:
          type: string
          examples: ["Max"]
        lastName:
          type: string
          examples: ["Muster"]
        department:
          type: string
          examples: ["IFU"]
    BusinessCase:
      type: object
      properties:
        id:
          type: string
          examples: ["b2de8ff4-0f3d-4555-9f78-f0239ef0b19c"]
        name:
          type: string
          examples: ["Mengenbezogene Leistungsverrechnung"]
          enum:
            - Mengenbezogene Leistungsverrechnung
            - Betragsmaessige Kostenverrechnung
            - Leistungsverrechnung von Personen
        type:
          type: integer
          format: int32
          examples: [1]
    Role:
      type: string
      enum:
        - Admin
        - Controller
        - User
      examples: ["Admin"]
    TransactionOverview:
      type: object
      properties:
        id:
          type: string
          examples: ["TRANS123"]
        isOpenTask:
          type: boolean
        isBookingTask:
          type: boolean
        description:
          type: string
          examples: ["Angefertigte Bauteile vom Labor"]
        businessCase:
          type: string
          examples: ["b2de8ff4-0f3d-4555-9f78-f0239ef0b19c"]
        sender:
          $ref: '#/components/schemas/Person'
        receiver:
          $ref: '#/components/schemas/Person'
        bookingDate:
          type: string
          format: date
        state:
          type: integer
          format: int32
          examples: [1]
        belegNumber:
          type: string
          examples: ["BELEG1234"]
    Transaction:
      type: object
      properties:
        id:
          type: string
          examples: ["TRANS123"]
        description:
          type: string
          examples: ["Angefertigte Bauteile vom Labor"]
        rights:
          $ref: '#/components/schemas/TransactionRights'
        businessCase:
          type: string
          examples: ["b2de8ff4-0f3d-4555-9f78-f0239ef0b19c"]
        businessCaseType:
          type: number
          examples: [1]
        sender:
          $ref: '#/components/schemas/Person'
        receiver:
          $ref: '#/components/schemas/Person'
        state:
          type: integer
          format: int32
          examples: [1]
        positions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionPosition'
        workflowType:
          type: integer
          format: int32
          examples: [1]
        workflow:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
        bookingDate:
          type: string
          format: date
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileOverview'
        belegNumber:
          type: string
          examples: ["BELEG1234"]
    TransactionStateChange:
      type: object
      properties:
        id:
          type: string
          examples: ["TRANS123"]
        action:
          $ref: '#/components/schemas/Action'
        comment:
          type: string
    TransactionPosition:
      type: object
      properties:
        id:
          type: string
          examples: ["POS1234"]
        description:
          type: string
          examples: ["Übernahme Unterricht"]
        sender:
          $ref: '#/components/schemas/TransactionPositionParty'
        receiver:
          $ref: '#/components/schemas/TransactionPositionParty'
        amount:
          type: number
          format: double
          examples: [12.1]
        unitOfMeasure:
          type: string
          examples: ["STD"]
        comment:
          type: string
          examples: ["Einspringen für Dozenten"]
    TransactionPositionParty:
      type: object
      properties:
        id:
          type: string
          examples: ["12345"]
        type:
          $ref: '#/components/schemas/TransactionPositionPartyType'
        name:
          type: string
          examples: ["Max Muster"]
        pricePerUnit:
          type: number
          format: double
          examples: [2.4]
    TransactionPositionPartyType:
      type: string
      examples: ["Person"]
      enum:
        - Person
        - Innenauftrag
        - PSP
        - Kostenstelle
    TransactionPositionData:
      type: object
      properties:
        senderFieldName:
          type: string
          examples: ["Leistung erbracht durch"]
        senderData:
          type: array
          items:
            $ref: '#/components/schemas/TransactionPositionParty'
        receiverFieldName:
          type: string
          examples: ["Leistung erbracht für (Innenauftrag / PSP)"]
        receiverData:
          type: array
          items:
            $ref: '#/components/schemas/TransactionPositionParty'
        unitOfMeasure:
            $ref: '#/components/schemas/UnitOfMeasure'
    TransactionRights:
      type: object
      properties:
        canEditTransaction:
          type: boolean
        canEditBookingDate:
          type: boolean
        canDeleteTransaction:
          type: boolean
        canCancelTransaction:
          type: boolean
        canChangeState:
          type: boolean
        canEditSender:
          type: boolean
        canEditReceiver:
          type: boolean
    UnitOfMeasure:
      type: object
      properties:
        id:
          type: string
          examples: ["STD"]
        name:
          type: string
          examples: ["Stunden"]
    Booking:
      type: array
      items:
        type: string
        examples: ["TRANS1234"]
          
    Action:
      type: string
      examples: ["approve"]
      enum:
        - approve
        - reject
        - cancel
        - reactivate
    WorkflowType:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1]
        name:
          type: string
          examples: ["Sender"]
    Workflow:
      type: object
      properties:
        id:
          type: string
          examples: ["WORKFLOW1234"]
        action:
          type: string
          examples: ["Beleg erstellt"]
        firstName:
          type: string
          examples: ["Max"]
        lastName:
          type: string
          examples: ["Muster"]
        date:
          type: string
          format: date-time
        comment:
          type: string
    FileOverview:
      type: object
      properties:
        archiveDocId:
          type: string
          examples: ["FILE1234"]
        subject:
          type: string
          examples: ["Beleg für Stundenaufwand"]
        fileName:
          type: string
          examples: ["foto.png"]
    BookingError:
      type: object
      properties:
        id:
          type: string
          examples: ["KI"]
        message:
          type: string
          examples: ["Revenue cannot be assigned to CTR 1020/0.840"]
    File:
      type: object
      properties:
        archiveDocId:
          type: string
          examples: ["FILE1234"]
        subject:
          type: string
          examples: ["Beleg für Stundenaufwand"]
        fileName:
          type: string
          examples: ["foto.png"]
        fileData:
          type: string
          examples: ["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CEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAAGINwAAgADEGwAAQADiDQAAIADxBgAAEIB4AwAACEC8AQAABCDeAAAAAhBvAAAAAYg3AACAAMQbAABAAOINAAAgAPEGAAAQgHgDAAAIQLwBAAAEIN4AAAACEG8AAAABiDcAAIAAxBsAAEAA4g0AACAA8QYAABCAeAMAAAhAvAEAAAQg3gAAAAIQbwAAAFfvX//6P963tw/ZAE5hAAAAAElFTkSuQmCC"]
        mimeType:
          type: string
          examples: ["image/png"]
