openapi: 3.1.0
info:
  title: Swagger Verrechnungsportal - OpenAPI 3.1
  description: This is the api definition of the Verrechnungsportal backend.
  version: 1.0.0
tags:
  - name: masterdata
    description: Access master data
  - name: transaction
    description: API's regarding the transactions
paths:
  /masterdata/state:
    get:
      tags: [masterdata]
      summary: Gets all the possible states
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
  /masterdata/workflowtype:
    get:
      tags: [masterdata]
      summary: Gets all the possible workflow types
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowType'
  /masterdata/person:
    get:
      tags: [masterdata]
      summary: Gets all persons
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
  /masterdata/businesscase:
    get:
      tags: [masterdata]
      summary: Get all available business cases
      description: There are 4 hardcoded business case types and an unknown amount of business cases defined for those 4 types
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessCase'
  /masterdata/transaction/{transactionId}:
    get:
      tags: [masterdata]
      summary: Get the available position-selectables for a specific transaction
      description: Get the position-selectables based on the sender, receiver and the BusinessCaseType
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionPositionData'
  /transaction:
    get:
      tags: [transaction]
      summary: Get all transactions
      description: Get all the transactions a user is allowed to see. In a later stage the api probably also has to be able to accept some filter parameters, but for v1.0 we will filter the data in the frontend
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionOverview'
    post:
      tags: [transaction]
      summary: Add a new Transaction
      description: Only the following fields will have relevant values [type, year, workflowType]
      requestBody:
        description: Create a new transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transaction/{id}:
    get:
      tags: [transaction]
      summary: Get a transaction
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    put:
      tags: [transaction]
      summary: Update a transaction
      description: 
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    delete:
      tags: [transaction]
      summary: Delete a transaction
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
  /transaction/{id}/state:
    put:
      tags: [transaction]
      summary: Update a transaction-state
      description: When a transaction states changes the backend has to update the state of the transaction and add an entry to the history with the correct action that was taken.
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionStateChange'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transaction/{id}/position:
    post:
      tags: [transaction]
      summary: Create a transaction position
      description: Every position can have a file attached to it. In this draft we would use Base64 encoded string representing the file
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
      requestBody:
        description: Create a transaction position
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPosition'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transaction/{id}/position/{positionId}:
    put:
      tags: [transaction]
      summary: Update an existing position
      description:
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
        - name: positionId
          in: path
          description: Id of the position
          required: true
          schema:
            type: string
      requestBody:
        description: Update a transaction position
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPosition'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    delete:
      tags: [transaction]
      summary: Delete an existing position
      description:
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: string
        - name: positionId
          in: path
          description: Id of the position
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transactions/book:
    put:
      tags: [transaction]
      summary: Book all positions of the transactions
      description: Book all positions of the sent transaction id's to the sent booking date
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
components:
  schemas:
    State:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1]
        name:
          type: string
          examples: ["Neu"]
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1235]
        pId:
          type: string
          examples: ["205205"]
        firstName:
          type: string
          examples: ["Max"]
        lastName:
          type: string
          examples: ["Muster"]
        department:
          type: string
          examples: ["IFU"]
    BusinessCase:
      type: object
      properties:
        id:
          type: string
          examples: ["b2de8ff4-0f3d-4555-9f78-f0239ef0b19c"]
        name:
          type: string
          examples: ["Mengenbezogene Leistungsverrechnung"]
          enum:
            - Mengenbezogene Leistungsverrechnung
            - Betragsmaessige Kostenverrechnung
            - Leistungsverrechnung von Personen
        type:
          type: integer
          format: int32
          examples: [1]
    TransactionOverview:
      type: object
      properties:
        id:
          type: string
          examples: ["TRANS123"]
        isOpenTask:
          type: boolean
        isBookingTask:
          type: boolean
        description:
          type: string
          examples: ["Angefertigte Bauteile vom Labor"]
        businessCase:
          type: string
          examples: ["b2de8ff4-0f3d-4555-9f78-f0239ef0b19c"]
        sender:
          $ref: '#/components/schemas/Person'
        receiver:
          $ref: '#/components/schemas/Person'
        date:
          type: string
          format: date-time
        state:
          type: integer
          format: int32
          examples: [1]
    Transaction:
      type: object
      properties:
        id:
          type: string
          examples: ["TRANS123"]
        description:
          type: string
          examples: ["Angefertigte Bauteile vom Labor"]
        rights:
          $ref: '#/components/schemas/TransactionRights'
        businessCase:
          type: string
          examples: ["b2de8ff4-0f3d-4555-9f78-f0239ef0b19c"]
        sender:
          $ref: '#/components/schemas/Person'
        receiver:
          $ref: '#/components/schemas/Person'
        state:
          type: integer
          format: int32
          examples: [1]
        positions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionPosition'
        workflowType:
          type: integer
          format: int32
          examples: [1]
        workflow:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
        date:
          type: string
          format: date-time
        bookingDate:
          type: string
          format: date-time
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
    TransactionStateChange:
      type: object
      properties:
        id:
          type: string
          examples: ["TRANS123"]
        action:
          $ref: '#/components/schemas/Action'
        comment:
          type: string
    TransactionPosition:
      type: object
      properties:
        id:
          type: string
          examples: ["POS1234"]
        description:
          type: string
          examples: ["Übernahme Unterricht"]
        sender:
          $ref: '#/components/schemas/TransactionPositionParty'
        receiver:
          $ref: '#/components/schemas/TransactionPositionParty'
        amount:
          type: integer
          format: int32
          examples: [12]
        unitOfMeasure:
          $ref: '#/components/schemas/UnitOfMeasure'
        comment:
          type: string
          examples: ["Einspringen für Dozenten"]
    TransactionPositionParty:
      type: object
      properties:
        id:
          type: string
          examples: ["12345"]
        type:
          $ref: '#/components/schemas/TransactionPositionPartyType'
        name:
          type: string
          examples: ["Max Muster"]
    TransactionPositionPartyType:
      type: string
      examples: ["Person"]
      enum:
        - Person
        - Innenauftrag
        - PSP
        - Kostenstelle
    TransactionPositionData:
      type: object
      properties:
        senderFieldName:
          type: string
          examples: ["Leistung erbracht durch"]
        senderData:
          type: array
          items:
            $ref: '#/components/schemas/TransactionPositionParty'
        receiverFieldNameFieldName:
          type: string
          examples: ["Leistung erbracht für (Innenauftrag / PSP)"]
        receiverData:
          type: array
          items:
            $ref: '#/components/schemas/TransactionPositionParty'
        unitsOfMeasure:
          type: array
          items:
            $ref: '#/components/schemas/UnitOfMeasure'
    TransactionRights:
      type: object
      properties:
        canEditSenderInformation:
          type: boolean
        canEditReceiverInformation:
          type: boolean
        canAddPositions:
          type: boolean
        canDeletePositions:
          type: boolean
        canAddFiles:
          type: boolean
        canDeleteFiles:
          type: boolean
        canStopTransaction:
          type: boolean
        canDeleteTransaction:
          type: boolean
        canRejectTransaction:
          type: boolean
        canAdvanceTransaction:
          type: boolean
    UnitOfMeasure:
      type: string
      examples: ["Stunden"]
      enum:
        - Stunden
        - Lektionen
        - Teamteaching
        - Anzahl
    Booking:
      type: array
      items:
        type: string
        examples: ["TRANS1234"]
          
    Action:
      type: string
      examples: ["approve"]
      enum:
        - approve
        - reject
        - cancel
        - reactivate
    WorkflowType:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1]
        name:
          type: string
          examples: ["Sender"]
    Workflow:
      type: object
      properties:
        id:
          type: string
          examples: ["WORKFLOW1234"]
        action:
          type: string
          examples: ["Beleg erstellt"]
        person:
          $ref: '#/components/schemas/Person'
        date:
          type: string
          format: date-time
        comment:
          type: string
    File:
      type: object
      properties:
        fileName:
          type: string
          examples: ["receipt.pdf"]
        fileData:
          type: string
          examples: ["UEsDBBQABgAIAAAAIQBqNFTPyQEAAEMQAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIooAACA..."]
