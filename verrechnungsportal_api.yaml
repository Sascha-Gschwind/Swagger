openapi: 3.1.0
info:
  title: Swagger Verrechnungsportal - OpenAPI 3.1
  description: This is the api definition of the Verrechnungsportal backend.
  version: 1.0.0
tags:
  - name: masterdata
    description: Access master data
  - name: transaction
    description: API's regarding the transactions
paths:
  /masterdata/state:
    get:
      tags: [masterdata]
      summary: Gets all the possible states
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
  /masterdata/person:
    get:
      tags: [masterdata]
      summary: Gets all persons
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
  /masterdata/businesscase:
    get:
      tags: [masterdata]
      summary: Get all available business cases
      description: There are 4 hardcoded business case types and an unknown amount of business cases defined for those 4 types
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessCase'
  /masterdata/{transactionId}:
    get:
      tags: [masterdata]
      summary: Get the available position-selectables for a specific transaction
      description: Get the position-selectables based on the sender, receiver and the BusinessCaseType
      parameters:
        - name: transactionId
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionPositionData'
  /transaction:
    get:
      tags: [transaction]
      summary: Get all transactions filterd for the user
      description: Get all the transactions a user is allowed to see. In a later stage the api probably also has to be able to accept some filter parameters, but for v1.0 we will filter the data in the frontend
      parameters:
        - name: actionNeeded
          in: query
          description: Filter transactions if there is an action needed by the logged in person
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionOverview'
    post:
      tags: [transaction]
      summary: Add a new Transaction
      description: Id will always be null because it is a create case. Sender or receiver will be filled depending on the process initiator (workflow type), one of them will be empty (if the process is started by the sender, the sender object will be filled out). The workflow is also empty on creation and the first workflow entry will be generated by the backend (that the transaction has been created now by the person initiating the POST request)
      requestBody:
        description: Create a new transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transaction/{id}:
    get:
      tags: [transaction]
      summary: Get a transaction
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    put:
      tags: [transaction]
      summary: Update a transaction
      description: 
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Update an existing transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    delete:
      tags: [transaction]
      summary: Delete a transaction
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Success
  /transaction/{id}/state:
    put:
      tags: [transaction]
      summary: Update a transaction-state
      description: When a transaction states changes the backend has to update the state of the transaction and add an entry to the history with the correct action that was taken.
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Update an existing transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionStateChange'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transaction/{id}/position:
    post:
      tags: [transaction]
      summary: Create a transaction position
      description: Every position can have a file attached to it. In this draft we would use Base64 encoded string representing the file
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Create a transaction position
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPosition'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transaction/{id}/position/{positionId}:
    put:
      tags: [transaction]
      summary: Update an existing position
      description:
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: integer
            format: int32
        - name: positionId
          in: path
          description: Id of the position
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Update a transaction position
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPosition'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    delete:
      tags: [transaction]
      summary: Delete an existing position
      description:
      parameters:
        - name: id
          in: path
          description: Id of the transaction
          required: true
          schema:
            type: integer
            format: int32
        - name: positionId
          in: path
          description: Id of the position
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transaction/book:
    put:
      tags: [transaction]
      summary: Book all positions of the transactions
      description: Book all positions of the sent transaction id's to the sent booking date
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
components:
  schemas:
    State:
      type: string
      examples:
        - New
        - PendingApprovalSender
        - PendingApprovalReceiver
        - PendingApprovalControlling
        - Rework
        - PendingBooking
        - Booked
        - Cancelled
      enum:
        - New
        - PendingApprovalSender
        - PendingApprovalReceiver
        - PendingApprovalControlling
        - Rework
        - PendingBooking
        - Booked
        - Cancelled
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1235]
        pId:
          type: integer
          format: int32
          examples: [205205]
        firstName:
          type: string
          examples: ["Max"]
        lastName:
          type: string
          examples: ["Muster"]
        department:
          type: string
          examples: ["IFU"]
        email:
          type: string
          examples: ["max.muster@ost.ch"]
    BusinessCase:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1]
        name:
          type: string
          examples: ["Mengenbezogene Leistungsverrechnung"]
          enum:
            - Mengenbezogene Leistungsverrechnung
            - Betragsmaessige Kostenverrechnung
            - Leistungsverrechnung von Personen
        type:
          $ref: '#/components/schemas/BusinessCaseType'
    BusinessCaseType:
      type: string
      examples: ["LeistungsverrechnungPerson"]
      enum:
        - LeistungsverrechnungPerson
        - LeistungsverrechnungSache
        - Kostenverrechnung
        - Ertragsverrechnung
    TransactionOverview:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1]
        description:
          type: string
          examples: ["Angefertigte Bauteile vom Labor"]
        type:
          $ref: '#/components/schemas/BusinessCaseType'
        sender:
          $ref: '#/components/schemas/Person'
        receiver:
          $ref: '#/components/schemas/Person'
        date:
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/State'
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1]
        description:
          type: string
          examples: ["Angefertigte Bauteile vom Labor"]
        type:
          $ref: '#/components/schemas/BusinessCaseType'
        sender:
          $ref: '#/components/schemas/Person'
        receiver:
          $ref: '#/components/schemas/Person'
        year:
          type: integer
          format: int32
          examples: [2024] 
        state:
          $ref: '#/components/schemas/State'
        positions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionPosition'
        workflowType:
          $ref: '#/components/schemas/WorkflowType'
        workflow:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
        date:
          type: string
          format: date-time
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
    TransactionStateChange:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1]
        action:
          $ref: '#/components/schemas/Action'
        comment:
          type: string
    TransactionPosition:
      type: object
      properties:
        id:
          type: integer
          format: int32
          examples: [1]
        description:
          type: string
          examples: ["Übernahme Unterricht"]
        sender:
          $ref: '#/components/schemas/TransactionPositionParty'
        receiver:
          $ref: '#/components/schemas/TransactionPositionParty'
        amount:
          type: integer
          format: int32
          examples: [12]
        unitOfMeasure:
          $ref: '#/components/schemas/UnitOfMeasure'
        comment:
          type: string
          examples: ["Einspringen für Dozenten"]
    TransactionPositionParty:
      type: object
      properties:
        id:
          type: string
          examples: ["12345"]
        type:
          $ref: '#/components/schemas/TransactionPositionPartyType'
        name:
          type: string
          examples: ["Max Muster"]
    TransactionPositionPartyType:
      type: string
      examples: ["Person"]
      enum:
        - Person
        - Innenauftrag
        - PSP
        - Kostenstelle
    TransactionPositionData:
      type: object
      properties:
        senderData:
          type: array
          items:
            $ref: '#/components/schemas/TransactionPositionParty'
        receiverData:
          type: array
          items:
            $ref: '#/components/schemas/TransactionPositionParty'
        unitsOfMeasure:
          type: array
          items:
            $ref: '#/components/schemas/UnitOfMeasure'
    UnitOfMeasure:
      type: string
      examples: ["Stunden"]
      enum:
        - Stunden
        - Lektionen
        - Teamteaching
        - Anzahl
    Booking:
      type: array
      items:
        type: integer
        format: int32
          
    Action:
      type: string
      examples: ["approve"]
      enum:
        - approve
        - reject
        - cancel
        - reactivate
    WorkflowType:
      type: string
      examples: ["Sender"]
      enum:
        - Sender
        - Receiver
    Workflow:
      type: object
      properties:
        action:
          type: string
        person:
          $ref: '#/components/schemas/Person'
        date:
          type: string
          format: date-time
        comment:
          type: string
    File:
      type: object
      properties:
        fileName:
          type: string
          examples: ["receipt.pdf"]
        fileData:
          type: string
          examples: ["UEsDBBQABgAIAAAAIQBqNFTPyQEAAEMQAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIooAACA..."]
